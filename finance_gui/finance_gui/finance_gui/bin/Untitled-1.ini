    def generate_yearly_pie_chart(self):
        """生成年度支出饼图（按父——子分类）"""
        try:
            year = int(self.year_var.get())
            self.status_label.config(text=f"查询{year}年数据...")
        except ValueError:
            messagebox.showerror("输入错误", "请输入有效的年份")
            return
        if not self.test_database_connection():
            messagebox.showerror("数据库错误", "无法连接数据库或没有数据")
            return
        data = self.get_yearly_expenses_by_category(year)
        if data is None:
            messagebox.showerror("查询错误", "数据查询失败")
            self.status_label.config(text="查询失败")
            return
        if not data:
            messagebox.showinfo("无数据", f"{year}年没有支出数据")
            self.status_label.config(text="没有找到数据")
            return
        self.current_category_names = [item[0] for item in data]
        amounts = [item[1] for item in data]
        for widget in self.chart_frame.winfo_children():
            widget.destroy()
        fig = Figure(figsize=(8, 6), dpi=100)
        ax = fig.add_subplot(111)
        self.current_fig = fig
        # 计算百分比，为内部标签做准备
        total_amount = sum(amounts) if amounts else 0
        # 定义显示在内部的标签和不显示的标签
        labels = []
        autopct_list = []
        self.visible_labels = []  # 用于记录哪些标签显示在内部
        
        # 角度阈值，用于判断是否足够宽以显示文本（大约10度为最小宽度）
        MIN_ANGLE_WIDTH = 10.0
        
        # 准备标签和百分比显示
        for i, (category, amount) in enumerate(zip(self.current_category_names, amounts)):
            # 计算该部分的角度范围
            angle_width = (amount / total_amount) * 360 if total_amount > 0 else 0
            
            # 如果角度宽度足够大，显示分类名和百分比
            if angle_width >= MIN_ANGLE_WIDTH:
                labels.append(category)
                autopct_list.append('%.1f%%' % (amount / total_amount * 100 if total_amount > 0 else 0))
                self.visible_labels.append(True)
            else:
                # 对于过窄的部分，不在内部显示标签，在悬停时显示
                labels.append("")  # 空标签
                autopct_list.append("")  # 空百分比
                self.visible_labels.append(False)
        
        # 绘制饼图，将标签放在内部
        wedges, texts, autotexts = ax.pie(
            amounts,
            labels=labels,
            autopct=lambda p: autopct_list[next(i for i, v in enumerate(autopct_list) if v == f'{p:.1f}%')] if f'{p:.1f}%' in autopct_list else '',
            startangle=90,
            wedgeprops={'edgecolor': 'w', 'linewidth': 1},
            textprops={'fontsize': 10, 'ha': 'center', 'va': 'center'},
            labeldistance=0.7  # 标签位置在饼图内部
        )
        
        # 调整自动百分比文本的样式
        for autotext in autotexts:
            autotext.set_fontsize(8)
            autotext.set_color('white')
            # 确保百分比文本在深色背景下也清晰可见
            autotext.set_bbox(dict(boxstyle="round,pad=0.2", fc="black", ec="none", alpha=0.3))
        
        # 为没有内部标签的部分，确保悬停时能正常显示信息
        self.narrow_segments = [i for i, visible in enumerate(self.visible_labels) if not visible]
        ax.set_title(f"{year}年支出分类占比\n（悬停查看明细，点击打开详情）", fontsize=16)
        tooltip = ax.annotate('', xy=(0.5, 0.5), xytext=(0.5, 0.5),
                               bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="gray", alpha=0.9),
                               arrowprops=dict(arrowstyle="->"), va="center", ha="center")
        tooltip.set_visible(False)
        canvas = FigureCanvasTkAgg(fig, self.chart_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        self.current_canvas = canvas
        canvas.mpl_connect('motion_notify_event', lambda event: self.on_pie_hover_yearly(event, wedges, tooltip, year))
        canvas.mpl_connect('button_press_event', lambda event: self.on_pie_click_yearly(event, wedges, year))
        self.status_label.config(text=f"已生成{year}年支出饼图")
